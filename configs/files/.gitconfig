[core]
excludesfile = %USERPROFILE%\\.gitignore
editor = nano
autocrlf = input
filemode = false
eol = lf
ignorecase = false

[pull]
rebase = true

[push]
autoSetupRemote = true
default = current

[includeIf "gitdir:~/Projects/github/"]
path = .gitconfig-github
[includeIf "gitdir:~/Projects/anatec/"]
path = .gitconfig-anatec

[filter "lfs"]
clean = git-lfs clean -- %f
smudge = git-lfs smudge -- %f
process = git-lfs filter-process
required = true

[credential]
helper = manager

[alias]
aa = add .
afd = "!f() { git add -A && git commit --fixup $@ && git asd; }; f"
afm = "!f() { git add -A && git commit --fixup $@ && git asm; }; f"
acp = "!f() { git add -A && git commit -m \"$@\" && git push; }; f"
amp = "!f() { git add -A && git commit --amend --no-edit && git push --force; }; f"
amend = commit --amend --no-edit
as = "! GIT_SEQUENCE_EDITOR=: git rebase -i --autosquash"
asd = "! git as develop"
asm = "! git as master"
bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs -r git branch -d; }; f"
bcleand = "!f() { git branch --merged ${1-develop} | grep -v " ${1-develop}$" | xargs -r git branch -d; }; f"
co = checkout
cop = "!f() { git checkout $1; git f; git pull; }; f"
cgh = "!f() { git clone git@github.com:Shuunen/$1.git; code $1; }; f"
f = fetch --prune-tags --prune
ff= merge --ff-only
fr = "!f() { git f && git rebase origin/$@ && echo -e \"\n Branch rebased to origin $@ \n\" && git st; }; f"
frd = "! git fr develop"
frm = "! git fr master"
l = log --pretty=format:'%C(yellow)%h%Cred%d %Creset%s%Cblue [%cn %ad]' --decorate --date=relative
ll = log --pretty=format:'%C(yellow)%h%Cred%d %Creset%s%Cblue [%cn %ad]' --decorate --date=relative -5
p = pull
pf = push --force
pt = !git tag -l | xargs git tag -d && git fetch -t # prune local git tags that don't exist on remote
rh = "!f() { git reset HEAD~$@ && echo -e \"\n You moved $@ commit(s) back \n\"; }; f"
sps = "! git stash && git pull && git stash apply"
srds = "! git stash && git frd && git stash apply"
st = status -sbu

[diff]
tool = winmerge
[difftool]
prompt = false
[difftool "winmerge"]
name = WinMerge
trustExitCode = true

[merge]
tool = winmerge
[mergetool]
prompt = false
keepBackup = false
keepTemporaries = false
[mergetool "winmerge"]
name = WinMerge
trustExitCode = true
