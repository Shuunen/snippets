[core]
excludesfile = %USERPROFILE%\\.gitignore
editor = vim
autocrlf = input
filemode = false
eol = lf
ignorecase = false

[user]
name = Romain Racamier-Lafon
email = romain.racamier@gmail.com

[filter "lfs"]
clean = git-lfs clean -- %f
smudge = git-lfs smudge -- %f
process = git-lfs filter-process
required = true

[credential]
helper = manager

[alias]
aa = add .
acp = "!f() { git add -A && git commit -m \"$@\" && git push; }; f"
amend = commit --amend --no-edit
as = "! GIT_SEQUENCE_EDITOR=: git rebase -i --autosquash"
asd = "! git as develop"
bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs -r git branch -d; }; f"
co = checkout
cgh = "!f() { git clone git@github.com:Shuunen/$1.git; code $1; }; f"
f = fetch -va
ff= merge --ff-only
fr = "!f() { git fetch && git rebase origin/$@ && echo -e \"\n Branch rebased to origin $@ \n\" && git st; }; f"
frd = "! git fr develop"
l = log --pretty=format:'%C(yellow)%h%Cred%d %Creset%s%Cblue [%cn %ad]' --decorate --date=relative
ll = log --pretty=format:'%C(yellow)%h%Cred%d %Creset%s%Cblue [%cn %ad]' --decorate --date=relative -5
pf = push --force
pt = !git tag -l | xargs git tag -d && git fetch -t # prune local git tags that don't exist on remote
rh = "!f() { git reset HEAD~$@ && echo -e \"\n You moved $@ commit(s) back \n\"; }; f"
sps = "! git stash && git pull && git stash apply"
st = status -sbu

[diff]
tool = araxis
[difftool]
prompt = false
[difftool "araxis"]
cmd = merge $LOCAL $REMOTE

[merge]
tool = araxis
[mergetool]
prompt = false
[mergetool "araxis"]
cmd = merge $LOCAL $REMOTE $MERGED$
